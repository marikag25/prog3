#include <iostream>
#include <vector>
using namespace std;
void segment_tree(int a[], int i, int levo, int desno, vector<int>& v)
{
    if (levo == desno)
    {
        v[i] = a[levo];
        return;
    }
    int sredina = (desno + levo) / 2;
    segment_tree(a, i * 2, levo, sredina, v);
    segment_tree(a, i * 2 + 1, sredina + 1, desno, v);
    v[i] = max(v[i * 2], v[i * 2 + 1]);
}
int max_element(int i, int l, int r, int l1, int r1, vector<int> &v)
{
    if (l > r) return 0;
    if (l == l1 && r == r1) return v[i];
    int mid = (l1 + r1) / 2;
    int left_max = max_element(2 * i, l, min(r, mid), l1, mid, v);
    int right_max = max_element(2 * i + 1, max(l, mid + 1), r, mid + 1, r1, v);
    return max(left_max, right_max);
}
void update(int i, int l, int r, int x, int val, vector<int> &v)
{
    if (l == r)
    {
        v[i] = val;
        return;
    }
    int mid = (l + r) / 2;
    if (x <= mid)
        update(i * 2, l, mid, x, val, v);
    else
        update(2 * i + 1, mid + 1, r, x, val, v);
    v[i] = max(v[i * 2], v[i * 2 + 1]);
}
